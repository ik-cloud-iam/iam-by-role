{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"kms:*",
				"route53:*",
				"acm:*",
				"logs:*",
				"apigateway:*",
				"events:*",
				"elasticloadbalancing:*",
				"lambda:*",
				"sts:*",
				"secretmanager:*",
				"elasticloadbalancing:*",
				"ses:*",
				"sns:*",
				"s3:*"
			],
			"Resource": ["*"]
		},
		{
			"Sid": "NetworkSetup",
			"Effect": "Allow",
			"Action": [
				"ec2:CreateDhcpOptions",
				"ec2:CreateTags",
				"ec2:CreateVpc",
				"ec2:CreateFlowLogs",
				"ec2:CreateNatGateway",
				"ec2:CreateNetworkInterfacePermission",
				"ec2:CreateNetworkAcl",
				"ec2:CreateInternetGateway",
				"ec2:CreateNetworkAclEntry",
				"ec2:CreateRoute",
				"ec2:CreateRouteTable",
				"ec2:CreateSecurityGroup",
				"ec2:CreateSubnet",
				"ec2:CreateLaunchTemplate",
				"ec2:CreateLaunchTemplateVersion",
				"ec2:ModifyVpcAttribute",
				"ec2:Describe*",
				"ec2:AssociateDhcpOptions",
				"ec2:GetLaunchTemplateData",
				"ec2:AssociateRouteTable",
				"ec2:AssociateVpcCidrblock",
				"ec2:AllocateAddress",
				"ec2:AssociateAddress",
				"ec2:AuthorizeSecurityGroupEgress",
				"ec2:AuthorizeSecurityGroupIngress",
				"ec2:AssociateSubnetCidrBlock",
				"ec2:AttachInternetGateway",
				"ec2:AttachNetworkInterface",
				"ec2:AttachVpnGateway",
				"ec2:ReplaceRouteTableAssociation",
				"ec2:ReplaceNetworkAclEntry",
				"ec2:ReleaseAddress",
				"ec2:RevokeSecurityGroupEgress",
				"ec2:RevokeSecurityGroupIngress",
				"ec2:ModifySubnetAttribute",
				"ec2:Delete*",
				"ec2:DetachInternetGateway",
				"ec2:DetachNetworkInterface",
				"ec2:DisassociateAddress",
				"iam:GetRole",
				"iam:ListAttachedRolePolicies",
				"iam:ListRolePolicies",
				"iam:ListEntitiesForPolicy",
				"iam:ListPolicyVersions",
				"iam:GetPolicy",
				"iam:GetPolicyVersion",
				"iam:ListInstanceProfilesForRole",
				"iam:GetInstanceProfile",
				"rds:DescribeDBSubnetGroups"
			],
			"Resource": ["*"]
		},
		{
			"Sid": "RolesManipulation",
			"Effect": "Allow",
			"Action": [
				"iam:CreateRole",
				"iam:PutRolePolicy",
				"iam:GetRolePolicy",
				"iam:PassRole",
				"iam:CreatePolicy",
				"iam:AttachRolePolicy",
				"iam:CreatePolicyVersion"
			],
			"Resource": [
				"arn:aws:iam::${account}:role/test-*",
				"arn:aws:iam::${account}:role/dev-*",
				"arn:aws:iam::${account}:role/qa-*",
				"arn:aws:iam::${account}:role/prod-*",
				"arn:aws:iam::${account}:policy/test-*",
				"arn:aws:iam::${account}:policy/dev-*",
				"arn:aws:iam::${account}:policy/qa-*",
				"arn:aws:iam::${account}:policy/prod-*"
			]
		},
		{
			"Sid": "InstanceProfilesAttachment",
			"Effect": "Allow",
			"Action": ["iam:CreateInstanceProfile", "iam:AddRoleToInstanceProfile"],
			"Resource": [
				"arn:aws:iam::${account}:instance-profile/test-*",
				"arn:aws:iam::${account}:instance-profile/qa-*",
				"arn:aws:iam::${account}:instance-profile/prod-*",
				"arn:aws:iam::${account}:instance-profile/dev-*"
			]
		},
		{
			"Sid": "DenyAllOutsideUSIgnoreGlobals",
			"Effect": "Deny",
			"NotAction": [
				"aws-portal:*",
				"iam:*",
				"organizations:*",
				"support:*",
				"sts:*",
				"route53:*",
				"ec2:DescribeAccountAttributes",
				"s3:*",
				"logs:*"
			],
			"Resource": "*",
			"Condition": {
				"StringNotEquals": { "aws:RequestedRegion": ["${region}"] }
			}
		},
		{
			"Sid": "DenyAllUsersNotUsingMFA",
			"Effect": "Deny",
			"NotAction": "*",
			"Resource": "*",
			"Condition": {
				"BoolIfExists": {
					"aws:MultiFactorAuthPresent": "false"
				}
			}
		}
	]
}
